import sys

class AVL_Node:
    def __init__(v, x):
        v.left = None
        v.right = None
        v.element = x
        v.height = 0

class AVL:
    def __init__(self):
        self.s = 0
        self.root = None
        self.h = -1

    def insert(self, v, x):
        if not v:
            v = AVL_Node(x)
            self.s += 1
            print(x," Lagt til size: ", self.s)
            if not self.root:
                self.root = v

        elif x < v.element:
            v.left = self.insert(v.left, x)
        elif x > v.element:
            v.right = self.insert(v.right, x)

        # set_height(v)
        # return balance(v)
        return v
    
    def find_min(v):
        if not v.left:
            return v
        return AVL.find_min(v.left)
    
    def remove(self,v, x):
        if not v:
            return None
        
        if x < v.element:
            v.left = self.remove(v.left, x)
        elif x > v.element:
            v.right = self.remove(v.right, x)

        # Oppdaterer size etter at vi har funnet riktig element
        if v.element == x:
            self.s -= 1
            print(x, " trekker fra size: ", self.s)

        # Sjekker om vi skal slette rot-noden, i såfall oppdatere den
        rot = None
        if v == self.root:
                rot = v
        
        #sjekker om har 1 eller 0 barn:
        if not v.left:
            v = v.right
        elif not v.right:
            v = v.left
        
        # har 2 barn
        else:
            u = AVL.find_min(v.right)
            v.element = u.element
            v.right = self.remove(v.right, u.element)

        # Evt oppdaterer rotnode:
        if rot:
            self.root = v
        # SetHeihght(v)
        #return balance(v)
        return v

    def contains(self,v,x):
        if not v:
            return None
        #print("sammenlikner ", v.element, "og",x)
        if v.element == x:
            return v
        if x < v.element:
            return self.contains(v.left,x)
        if x > v.element:
            return self.contains(v.right,x)

    def size(self):
        return self.s
    
    def height(self, v):
        # returnerer -1 dersom v = None
        if not v:
            return -1
        # returnerer høyde n til noden
        return v.h
        
    def set_height(self, v):
        if not v:
            return
        v.h = 1 + max(AVL.height(v.left), AVL.height(v.right))
    
    def v_rotasjon(self, v):
        pass




    
input = sys.stdin.read().splitlines() # en liste med 1 element for hver linje
tree = AVL()
root = tree.root

for i in range(int(input[0])+1):

    if i == 0:
        continue
    commands = input[i].split(" ")
    c = commands[0]
    try:
        n = commands[1]
    except:
        print(tree.size())
    if c == "contains":
        if tree.contains(root,n):
            print("true")
        else:
            print("false")
    elif c == "insert":
        tree.insert(root,n)
    elif c == "remove":
        tree.remove(root,n)
    root = tree.root
    #print("rot: ", root.element)
